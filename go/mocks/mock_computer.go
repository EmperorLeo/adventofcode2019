// Code generated by MockGen. DO NOT EDIT.
// Source: util/computer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIComputer is a mock of IComputer interface
type MockIComputer struct {
	ctrl     *gomock.Controller
	recorder *MockIComputerMockRecorder
}

// MockIComputerMockRecorder is the mock recorder for MockIComputer
type MockIComputerMockRecorder struct {
	mock *MockIComputer
}

// NewMockIComputer creates a new mock instance
func NewMockIComputer(ctrl *gomock.Controller) *MockIComputer {
	mock := &MockIComputer{ctrl: ctrl}
	mock.recorder = &MockIComputerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIComputer) EXPECT() *MockIComputerMockRecorder {
	return m.recorder
}

// Next mocks base method
func (m *MockIComputer) Next() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(error)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockIComputerMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockIComputer)(nil).Next))
}

// Run mocks base method
func (m *MockIComputer) Run() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run")
}

// Run indicates an expected call of Run
func (mr *MockIComputerMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockIComputer)(nil).Run))
}

// Read mocks base method
func (m *MockIComputer) Read() (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockIComputerMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockIComputer)(nil).Read))
}

// Poll mocks base method
func (m *MockIComputer) Poll() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Poll")
}

// Poll indicates an expected call of Poll
func (mr *MockIComputerMockRecorder) Poll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Poll", reflect.TypeOf((*MockIComputer)(nil).Poll))
}

// PollResult mocks base method
func (m *MockIComputer) PollResult() []int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PollResult")
	ret0, _ := ret[0].([]int)
	return ret0
}

// PollResult indicates an expected call of PollResult
func (mr *MockIComputerMockRecorder) PollResult() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollResult", reflect.TypeOf((*MockIComputer)(nil).PollResult))
}

// Type mocks base method
func (m *MockIComputer) Type(i int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Type", i)
}

// Type indicates an expected call of Type
func (mr *MockIComputerMockRecorder) Type(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockIComputer)(nil).Type), i)
}

// TypeRepeat mocks base method
func (m *MockIComputer) TypeRepeat(i int, stop <-chan bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TypeRepeat", i, stop)
}

// TypeRepeat indicates an expected call of TypeRepeat
func (mr *MockIComputerMockRecorder) TypeRepeat(i, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TypeRepeat", reflect.TypeOf((*MockIComputer)(nil).TypeRepeat), i, stop)
}

// GetMem mocks base method
func (m *MockIComputer) GetMem(i int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMem", i)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetMem indicates an expected call of GetMem
func (mr *MockIComputerMockRecorder) GetMem(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMem", reflect.TypeOf((*MockIComputer)(nil).GetMem), i)
}

// Close mocks base method
func (m *MockIComputer) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockIComputerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIComputer)(nil).Close))
}
